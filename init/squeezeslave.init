#!/bin/bash
### BEGIN INIT INFO
# Provides:          squeezeslave
# Required-Start:
# Required-Stop:
# Should-Start:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Squeezeslave
# Description:       Light weight streaming audio player for Logitech's Squeezebox audio server
### END INIT INFO

# Author: Ralph Irving <ralph.irving@hotmail.com>
#
# Install Instructions
#
#	Copy file to /etc/init.d/squeezeslave
#	chmod 755 /etc/init.d/squeezeslave
#	update-rc.d squeezeslave defaults
#
#	Create /etc/default/squeezeslave to override any default
#		variables defined here.  No not edit this file.
#
# Uninstall Instructions
#
#	update-rc.d squeezeslave remove
#
# Do NOT "set -e"

ZONES=(default)
# Read zone configuration file if it is present
[ -r /etc/default/squeezeslave-zones ] && . /etc/default/squeezeslave-zones

# Global config
# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DAEMON=/usr/bin/squeezeslave
SCRIPTNAME=/etc/init.d/squeezeslave
SBSHOST="localhost"

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

VERBOSE=yes

for ZONE in ${ZONES[*]}; do

	# Instance config
	NAME=$ZONE
	DESC="Squeezeslave Zone"
	PIDFILE=/var/run/$NAME.pid
	SSMAC=`echo $NAME | md5sum | awk '{print substr($0,0,3)":"substr($0,3,2)":"substr($0,5,2)":"substr($0,7,2)":"substr($0,9,2)":"substr($0,11,2)}'`
	SSOPTIONS=
	SSLOG=/var/log/$NAME.log
	DAEMON_ARGS="-R -M${SSLOG} ${SSOPTIONS} -m${SSMAC} ${SBSHOST} -n $ZONE"

	do_start()
	{
		[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"

		if start-stop-daemon --start --quiet --pidfile $PIDFILE --make-pidfile --name $NAME --exec $DAEMON -- $DAEMON_ARGS
		then
			ps -ef | grep $ZONE | grep squeezeslave | awk '{print $2}' > $PIDFILE
			[ "$VERBOSE" != no ] && log_end_msg 0
		else
			[ "$VERBOSE" != no ] && log_end_msg 1
		fi
	}

	do_stop()
	{
		[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"

		if start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE
		then
			[ "$VERBOSE" != no ] && log_end_msg 0
			rm -f $PIDFILE
		else
			[ "$VERBOSE" != no ] && log_end_msg 1
		fi
	}

	case "$1" in
		start)
			do_start
			;;

	 	stop)
			do_stop
			;;

		status)
			status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
			;;

		restart|force-reload)
			log_daemon_msg "Restarting $DESC" "$NAME"
			do_stop
			case "$?" in
				0|1)
					do_start
					case "$?" in
						0) log_end_msg 0 ;;
						1) log_end_msg 1 ;; # Old process is still running
						*) log_end_msg 1 ;; # Failed to start
					esac
			;;

		  *)
		  	# Failed to stop
			log_end_msg 1
			;;
		esac
		;;

	  *)
		echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
		exit 3
		;;
	esac

	sleep 3

done

exit 0